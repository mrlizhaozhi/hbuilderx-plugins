"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const node_1=require("vscode-languageserver/node"),vscode_languageserver_textdocument_1=require("vscode-languageserver-textdocument"),protocol_1=require("vscode-languageserver-protocol/lib/common/protocol"),indexprocesstask_1=require("./indexprocesstask"),request_1=require("./request"),vscode_uri_1=require("vscode-uri"),nls=require("../localize/localize"),documentContext_1=require("../utils/documentContext"),processormanager_1=require("./processormanager"),localize=nls.loadMessageBundle(__filename),connection=(0,node_1.createConnection)(node_1.ProposedFeatures.all),documents=new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument),processorManger=new processormanager_1.IndexProcessorManager,indexProcessTask=new indexprocesstask_1.IndexProcessTask(documents,processorManger);let hasConfigurationCapability=!1,hasWorkspaceFolderCapability=!1,workspaceFolders=[];connection.onInitialize((e=>{const o=e.capabilities;workspaceFolders=e.workspaceFolders,Array.isArray(workspaceFolders)||(workspaceFolders=[]),connection.console.log(JSON.stringify(o)),hasConfigurationCapability=!(!o.workspace||!o.workspace.configuration),hasWorkspaceFolderCapability=!(!o.workspace||!o.workspace.workspaceFolders);const r={capabilities:{textDocumentSync:{openClose:!0,change:node_1.TextDocumentSyncKind.Incremental}}};return hasWorkspaceFolderCapability&&(r.capabilities.workspace={workspaceFolders:{supported:!0}}),r})),connection.onInitialized((()=>{hasConfigurationCapability&&connection.client.register(node_1.DidChangeConfigurationNotification.type,void 0),hasWorkspaceFolderCapability&&(connection.client.register(node_1.DidChangeWorkspaceFoldersNotification.type),connection.onNotification(node_1.DidChangeWorkspaceFoldersNotification.type,(e=>{const o=e.event.added,r=e.event.removed,n=[];if(workspaceFolders)for(const e of workspaceFolders)r.some((o=>o.uri===e.uri))||o.some((o=>o.uri===e.uri))||n.push(e);workspaceFolders=n.concat(o),r.forEach((e=>{indexProcessTask.removeIndexTask(e,!0)})),o.forEach((e=>{indexProcessTask.addProject(e)}))})))})),connection.onDidChangeConfiguration((e=>{}));let delayDoIndex=function(){let e=new Map;function o(e){(0,documentContext_1.getRootFolders)(e,workspaceFolders).forEach((o=>{indexProcessTask.doIndexForFile(e,o)}))}return function(r,n){if(n<=0)o(r);else{if(e.has(r)){let o=e.get(r);clearTimeout(o),e.delete(r)}e.set(r,setTimeout((()=>{e.has(r)&&(e.delete(r),o(r))}),n))}}}();documents.onDidChangeContent((e=>{let o=e.document.uri;delayDoIndex(o,300)})),documents.onDidClose((e=>{let o=e.document.uri;delayDoIndex(o,20)})),connection.onDidChangeWatchedFiles((e=>{e.changes.forEach((e=>{if(e.type===protocol_1.FileChangeType.Created||e.type===protocol_1.FileChangeType.Changed)delayDoIndex(e.uri,20);else if(e.type===protocol_1.FileChangeType.Deleted){let o=e.uri;(0,documentContext_1.getRootFolders)(o,workspaceFolders).forEach((e=>{indexProcessTask.removeIndexForFile(o,e)}))}}))}));let delayTraverseAllFolders=function(){let e=null;return function(){null===e&&(e=setTimeout((()=>{e=null,workspaceFolders.forEach((e=>{indexProcessTask.removeIndexTask(e,!0).then((()=>{indexProcessTask.addProject(e)}))}))}),1e3))}}();connection.onRequest(request_1.RegisterProcessorRequest.type,(e=>{try{Promise.resolve().then((()=>require(e.url))).then((o=>{if(o&&o.createFileIndexProcessor){const r=o.createFileIndexProcessor(processorManger);r&&(processorManger.addProcessor(r,e.language),delayTraverseAllFolders())}}))}catch(e){console.log(e)}})),connection.onRequest(request_1.RebuildProjectIndexRequest.type,(e=>{const o=vscode_uri_1.URI.parse(e.folderUri);try{const e=o.toString();let r=workspaceFolders.find((o=>o.uri===e));if(r)return indexProcessTask.removeIndexTask(r,!0).then((()=>(indexProcessTask.addActivatedProject(r,indexprocesstask_1.ProjectActiveReason.RebuildIndex),indexProcessTask.addProject(r,!0)))).then((function(){}),(function(e){return new node_1.ResponseError(node_1.ErrorCodes.InternalError,"",e)}));let n=localize("indexservice.notfound","未找到项目路径: [{0}]",o.fsPath);return Promise.resolve(new node_1.ResponseError(node_1.ErrorCodes.InternalError,n))}catch(e){return Promise.resolve(new node_1.ResponseError(node_1.ErrorCodes.InternalError,"",e))}})),connection.onNotification(request_1.EditorActivatedNotify.type,(e=>{(e?(0,documentContext_1.getRootFolders)(e,workspaceFolders):[]).forEach((e=>{indexProcessTask.addActivatedProject(e,indexprocesstask_1.ProjectActiveReason.ActiveFile)}))})),documents.listen(connection),connection.listen();