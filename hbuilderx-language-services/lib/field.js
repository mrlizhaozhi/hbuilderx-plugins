const{parseField:parseField}=require("./parser");function parse(e){return parseField(e)}function node(e){const t=parse({source:e.source});let r=parseInt(e.offset),s=[],n=function(e){"Identifier"===e.type?s.unshift(e.name):(s.unshift(e.property.name),n(e.object))},a=function(e){let t=e.body;for(let e=0;e<t.length;++e){let n=t[e].expression;if(!n||"JQLForeignKeyExpression"!==n.type)return n&&"Identifier"===n.type?{type:"Table",member:s,data:n}:{type:"Table",member:s};{let e=n.table;if(e.start<=r&&r<=e.end)return{type:"Table",member:s,data:e};s.push(e.name),a(n.fields)}}},i=function(e){let t=e.start,p=e.end,l=e.type;if(t<=r&&r<=p){if("MemberExpression"===l){if(e.property.start<=r&&r<=e.property.end)return n(e.object),{type:"Table",data:e.property,member:s};{let t=e.object;return i(t)}}if("JQLForeignKeyExpression"!==l)return"Identifier"===l?{type:"Identifier",data:e}:{type:"Other"};if(e.fields.start<=r&&r<=e.fields.end)return s.push(e.table.name),a(e.fields);if(e.table.start<=r&&r<=e.table.end)return{type:"Table",data:e.table,member:s};if(e.alias&&e.alias.start<=r&&r<=e.alias.end)return{type:"Alias",data:e.alias}}};if(t.hasOwnProperty("body")){let e=t.body;for(let t=0;t<e.length;++t){let s=e[t].expression;if(s instanceof Object)if("SequenceExpression"===s.type){s=s.expressions;for(let e=0;e<s.length;++e){let t=s[e],n=t.start,a=t.end;if(n<=r&&r<=a)return i(t)}}else{if("MemberExpression"===s.type)return i(s);if("JQLAsExpression"===s.type){let{field:e,alias:t}=s;return t.start<=r&&r<=t.end?{type:"Alias",data:t}:e.start<=r&&r<=e.end&&"MemberExpression"===e.type?i(e):{type:"Other"}}if("JQLForeignKeyExpression"===s.type)return i(s);if("CallExpression"===s.type){let{callee:e,arguments:arguments}=s;if(e.start<=r&&r<=e.end)return{type:"Other"};for(let e=0;e<arguments.length;++e){let t=arguments[e];if(t.start<=r&&r<=t.end)return{type:"Args",data:t}}}}}}return{type:"Other"}}function alias(e){let t=[];const r=parse({source:e.source});if(r.hasOwnProperty("body")){let e=r.body;for(let r=0;r<e.length;++r){let s=e[r].expression;if(s instanceof Object)if("JQLAsExpression"===s.type){let{field:e,alias:r}=s;r.start<=offset&&offset<=r.end&&t.push(r.name)}else"Identifier"===s.type&&s.start<=offset&&offset<=s.end&&t.push(s.name)}}return t}module.exports={parse:parse,node:node,alias:alias};