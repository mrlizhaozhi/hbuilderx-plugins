"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const vscode=require("vscode"),fileConfigurationManager_1=require("./languageFeatures/fileConfigurationManager"),languageProvider_1=require("./languageProvider"),PConst=require("./protocol.const"),typescriptServiceClient_1=require("./typescriptServiceClient"),arrays_1=require("./utils/arrays"),dispose_1=require("./utils/dispose"),errorCodes=require("./utils/errorCodes"),typeConverters=require("./utils/typeConverters"),typingsStatus_1=require("./utils/typingsStatus"),styleCheckDiagnostics=new Set([...errorCodes.variableDeclaredButNeverUsed,...errorCodes.propertyDeclaretedButNeverUsed,...errorCodes.allImportsAreUnused,...errorCodes.unreachableCode,...errorCodes.unusedLabel,...errorCodes.fallThroughCaseInSwitch,...errorCodes.notAllCodePathsReturnAValue]);class TypeScriptServiceClientHost extends dispose_1.Disposable{constructor(e,t,s,i,r){super(),this.languages=[],this.languagePerId=new Map,this.reportStyleCheckAsWarnings=!0,this.commandManager=i.commandManager;const n=this.getAllModeIds(e,i.pluginManager);this.client=this._register(new typescriptServiceClient_1.default(t,s,i,n)),this.client.onDiagnosticsReceived((({kind:e,resource:t,diagnostics:s})=>{this.diagnosticsReceived(e,t,s)}),null,this._disposables),this.client.onResendModelsRequested((()=>this.populateService()),null,this._disposables),this.typingsStatus=this._register(new typingsStatus_1.default(this.client)),this.fileConfigurationManager=this._register(new fileConfigurationManager_1.default(this.client,s));for(const t of e){const e=new languageProvider_1.default(this.client,t,this.commandManager,this.client.telemetryReporter,this.typingsStatus,this.fileConfigurationManager,r);this.languages.push(e),this._register(e),this.languagePerId.set(t.id,e)}Promise.resolve().then((()=>require("./languageFeatures/updatePathsOnRename"))).then((e=>this._register(e.register(this.client,this.fileConfigurationManager,(e=>this.handles(e)))))),Promise.resolve().then((()=>require("./languageFeatures/workspaceSymbols"))).then((e=>this._register(e.register(this.client,n)))),this.client.ensureServiceStarted(),this.client.onReady((()=>{const e=new Set;for(const t of i.pluginManager.plugins)if(t.configNamespace&&t.languages.length)this.registerExtensionLanguageProvider({id:t.configNamespace,modeIds:Array.from(t.languages),diagnosticSource:"ts",diagnosticLanguage:1,diagnosticOwner:"typescript",isExternal:!0},r);else for(const s of t.languages)e.add(s);if(e.size)for(const t of e)this.registerExtensionLanguageProvider({id:"html"===t?"javascript":"typescript",modeIds:[t],diagnosticSource:"ts",diagnosticLanguage:"html"===t?0:1,diagnosticOwner:"typescript",isExternal:!0},r)})),this.client.onTsServerStarted((()=>{this.triggerAllDiagnostics()})),vscode.workspace.onDidChangeConfiguration(this.configurationChanged,this,this._disposables),this.configurationChanged()}registerExtensionLanguageProvider(e,t){const s=new languageProvider_1.default(this.client,e,this.commandManager,this.client.telemetryReporter,this.typingsStatus,this.fileConfigurationManager,t);this.languages.push(s),this._register(s),this.languagePerId.set(e.id,s)}getAllModeIds(e,t){return(0,arrays_1.flatten)([...e.map((e=>e.modeIds)),...t.plugins.map((e=>e.languages))])}get serviceClient(){return this.client}reloadProjects(){this.client.executeWithoutWaitingForResponse("reloadProjects",null),this.triggerAllDiagnostics()}async handles(e){return!!await this.findLanguage(e)||this.client.bufferSyncSupport.handles(e)}configurationChanged(){const e=vscode.workspace.getConfiguration("typescript");this.reportStyleCheckAsWarnings=e.get("reportStyleChecksAsWarnings",!0)}async findLanguage(e){try{let t=this.client.toPath(e);const s=vscode.workspace.textDocuments.find((e=>this.client.toPath(e.uri)===t));return this.languages.find((t=>t.handles(e,s)))}catch(e){return}}triggerAllDiagnostics(){for(const e of this.languagePerId.values())e.triggerAllDiagnostics()}populateService(){this.fileConfigurationManager.reset();for(const e of this.languagePerId.values())e.reInitialize()}async diagnosticsReceived(e,t,s){const i=await this.findLanguage(t);i&&i.diagnosticsReceived(e,t,this.createMarkerDatas(s,i.diagnosticSource))}createMarkerDatas(e,t){return e.map((e=>this.tsDiagnosticToVsDiagnostic(e,t)))}tsDiagnosticToVsDiagnostic(e,t){const{start:s,end:i,text:r}=e,n=new vscode.Range(typeConverters.Position.fromLocation(s),typeConverters.Position.fromLocation(i)),a=new vscode.Diagnostic(n,r,this.getDiagnosticSeverity(e));a.source=e.source||t,e.code&&(a.code=e.code);const o=e.relatedInformation;o&&(a.relatedInformation=(0,arrays_1.coalesce)(o.map((e=>{const t=e.span;if(t)return new vscode.DiagnosticRelatedInformation(typeConverters.Location.fromTextSpan(this.client.toResource(t.file),t),e.message)}))));const c=[];e.reportsUnnecessary&&c.push(vscode.DiagnosticTag.Unnecessary),e.reportsDeprecated&&c.push(vscode.DiagnosticTag.Deprecated),a.tags=c.length?c:void 0;const g=a;return g.reportUnnecessary=e.reportsUnnecessary,g.reportDeprecated=e.reportsDeprecated,g}getDiagnosticSeverity(e){if(this.reportStyleCheckAsWarnings&&this.isStyleCheckDiagnostic(e.code)&&e.category===PConst.DiagnosticCategory.error)return vscode.DiagnosticSeverity.Warning;switch(e.category){case PConst.DiagnosticCategory.error:return vscode.DiagnosticSeverity.Error;case PConst.DiagnosticCategory.warning:return vscode.DiagnosticSeverity.Warning;case PConst.DiagnosticCategory.suggestion:return vscode.DiagnosticSeverity.Hint;default:return vscode.DiagnosticSeverity.Error}}isStyleCheckDiagnostic(e){return"number"==typeof e&&styleCheckDiagnostics.has(e)}}exports.default=TypeScriptServiceClientHost;