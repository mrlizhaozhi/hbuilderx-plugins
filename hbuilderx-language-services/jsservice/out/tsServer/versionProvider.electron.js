"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DiskTypeScriptVersionProvider=void 0;const fs=require("fs"),path=require("path"),vscode=require("vscode"),api_1=require("../utils/api"),relativePathResolver_1=require("../utils/relativePathResolver"),versionProvider_1=require("./versionProvider");class DiskTypeScriptVersionProvider{constructor(e){this.configuration=e}updateConfiguration(e){this.configuration=e}get defaultVersion(){return this.globalVersion||this.bundledVersion}get globalVersion(){var e;if(null===(e=this.configuration)||void 0===e?void 0:e.globalTsdk){const e=this.loadVersionsFromSetting("user-setting",this.configuration.globalTsdk);if(e&&e.length)return e[0]}return this.contributedTsNextVersion}get localVersion(){const e=this.localTsdkVersions;if(e&&e.length)return e[0];const r=this.localNodeModulesVersions;return r&&1===r.length?r[0]:void 0}get localVersions(){const e=this.localTsdkVersions.concat(this.localNodeModulesVersions),r=new Set;return e.filter((e=>!r.has(e.path)&&(r.add(e.path),!0)))}get bundledVersion(){const e=this.getContributedVersion("bundled","vscode.typescript-language-features",["node_modules"]);if(e)return e;throw vscode.window.showErrorMessage((0,versionProvider_1.localize)("noBundledServerFound","VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.")),new Error("Could not find bundled tsserver.js")}get contributedTsNextVersion(){return this.getContributedVersion("ts-nightly-extension","ms-vscode.vscode-typescript-next",["node_modules"])}getContributedVersion(e,r,s){try{const r=path.join(__dirname,"..","..","..",...s,"typescript","lib","tsserver.js"),i=new versionProvider_1.TypeScriptVersion(e,r,DiskTypeScriptVersionProvider.getApiVersion(r),"");if(i.isValid)return i}catch(e){}}get localTsdkVersions(){var e;const r=null===(e=this.configuration)||void 0===e?void 0:e.localTsdk;return r?this.loadVersionsFromSetting("workspace-setting",r):[]}loadVersionsFromSetting(e,r){if(path.isAbsolute(r)){const s=path.join(r,"tsserver.js");return[new versionProvider_1.TypeScriptVersion(e,s,DiskTypeScriptVersionProvider.getApiVersion(s))]}const s=relativePathResolver_1.RelativeWorkspacePathResolver.asAbsoluteWorkspacePath(r);if(void 0!==s){const i=path.join(s,"tsserver.js");return[new versionProvider_1.TypeScriptVersion(e,i,DiskTypeScriptVersionProvider.getApiVersion(i),r)]}return this.loadTypeScriptVersionsFromPath(e,r)}get localNodeModulesVersions(){return this.loadTypeScriptVersionsFromPath("node-modules",path.join("node_modules","typescript","lib")).filter((e=>e.isValid))}loadTypeScriptVersionsFromPath(e,r){if(!vscode.workspace.workspaceFolders)return[];const s=[];for(const i of vscode.workspace.workspaceFolders){let t=r;vscode.workspace.workspaceFolders.length>1&&(t=path.join(i.name,r));const o=path.join(i.uri.fsPath,r,"tsserver.js");s.push(new versionProvider_1.TypeScriptVersion(e,o,DiskTypeScriptVersionProvider.getApiVersion(o),t))}return s}static getApiVersion(e){const r=DiskTypeScriptVersionProvider.getTypeScriptVersion(e);if(r)return r;const s=vscode.workspace.getConfiguration().get("typescript.tsdk_version",void 0);return s?api_1.default.fromVersionString(s):void 0}static getTypeScriptVersion(e){if(!fs.existsSync(e))return;const r=e.split(path.sep);if(r.length<=2)return;const s=r.slice(0,-2).join(path.sep);let i=path.join(s,"package.json");if(fs.existsSync(i)||"built"===path.basename(s)&&(i=path.join(s,"..","package.json")),!fs.existsSync(i))return;const t=fs.readFileSync(i).toString();let o=null;try{o=JSON.parse(t)}catch(e){return}return o&&o.version&&o.version?api_1.default.fromVersionString(o.version):void 0}}exports.DiskTypeScriptVersionProvider=DiskTypeScriptVersionProvider;