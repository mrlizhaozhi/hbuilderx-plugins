"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const vscode=require("vscode"),nls=require("vscode-nls"),arrays_1=require("../utils/arrays"),dispose_1=require("../utils/dispose"),languageModeIds_1=require("../utils/languageModeIds"),tsconfig_1=require("../utils/tsconfig"),localize=nls.loadMessageBundle();var ProjectInfoState;!function(t){t.None=Object.freeze({type:0});t.Pending=class{constructor(t){this.resource=t,this.type=1,this.cancellation=new vscode.CancellationTokenSource}};t.Resolved=class{constructor(t,e){this.resource=t,this.configFile=e,this.type=2}}}(ProjectInfoState||(ProjectInfoState={}));class ProjectStatusCommand{constructor(t,e){this._client=t,this._delegate=e,this.id="_typescript.projectStatus"}async execute(){const t=this._delegate(),e=await vscode.window.showQuickPick((0,arrays_1.coalesce)([this.getProjectItem(t),this.getVersionItem(),this.getHelpItem()]),{placeHolder:localize("projectQuickPick.placeholder","TypeScript Project Info")});return null==e?void 0:e.run()}getVersionItem(){return{label:localize("projectQuickPick.version.label","Select TypeScript Version..."),description:this._client.apiVersion.displayName,run:()=>{this._client.showVersionPicker()}}}getProjectItem(t){const e=2===t.type?this._client.getWorkspaceRootForResource(t.resource):void 0;if(e)return 2===t.type&&(0,tsconfig_1.isImplicitProjectConfigFile)(t.configFile)?{label:localize("projectQuickPick.project.create","Create tsconfig"),detail:localize("projectQuickPick.project.create.description","This file is currently not part of a tsconfig/jsconfig project"),run:()=>{(0,tsconfig_1.openOrCreateConfig)(0,e,this._client.configuration)}}:{label:localize("projectQuickPick.version.goProjectConfig","Open tsconfig"),description:2===t.type?vscode.workspace.asRelativePath(t.configFile):void 0,run:()=>{2===t.type?(0,tsconfig_1.openProjectConfigOrPromptToCreate)(0,this._client,e,t.configFile):1===t.type&&(0,tsconfig_1.openProjectConfigForFile)(0,this._client,t.resource)}}}getHelpItem(){return{label:localize("projectQuickPick.help","TypeScript help"),run:()=>{vscode.env.openExternal(vscode.Uri.parse("https://go.microsoft.com/fwlink/?linkid=839919"))}}}}class VersionStatus extends dispose_1.Disposable{constructor(t,e){super(),this._client=t,this._ready=!1,this._state=ProjectInfoState.None,this._statusBarEntry=this._register(vscode.window.createStatusBarItem({id:"status.typescript",name:localize("projectInfo.name","TypeScript: Project Info"),alignment:vscode.StatusBarAlignment.Right,priority:99}));const i=new ProjectStatusCommand(this._client,(()=>this._state));e.register(i),this._statusBarEntry.command=i.id,vscode.window.onDidChangeActiveTextEditor(this.updateStatus,this,this._disposables),this._client.onReady((()=>{this._ready=!0,this.updateStatus()})),this._register(this._client.onTsServerStarted((({version:t})=>this.onDidChangeTypeScriptVersion(t))))}onDidChangeTypeScriptVersion(t){this._statusBarEntry.text=t.displayName,this._statusBarEntry.tooltip=t.path,this.updateStatus()}async updateStatus(){if(!vscode.window.activeTextEditor)return void this.hide();const t=vscode.window.activeTextEditor.document;if((0,languageModeIds_1.isTypeScriptDocument)(t)){const e=this._client.normalizedPath(t.uri);if(e){if(this._statusBarEntry.show(),!this._ready)return;const i=new ProjectInfoState.Pending(t.uri);this.updateState(i);const s=await this._client.execute("projectInfo",{file:e,needFileNameList:!1},i.cancellation.token);return void("response"===s.type&&s.body&&this._state===i&&(this.updateState(new ProjectInfoState.Resolved(t.uri,s.body.configFileName)),this._statusBarEntry.show()))}}vscode.window.activeTextEditor.viewColumn&&this.hide()}hide(){this._statusBarEntry.hide(),this.updateState(ProjectInfoState.None)}updateState(t){this._state!==t&&(1===this._state.type&&(this._state.cancellation.cancel(),this._state.cancellation.dispose()),this._state=t)}}exports.default=VersionStatus;