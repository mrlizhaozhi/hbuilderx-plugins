"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.create=void 0;const vscode=require("vscode"),vscode_nls_1=require("vscode-nls"),tsconfig_1=require("./tsconfig"),localize=(0,vscode_nls_1.loadMessageBundle)();class ExcludeHintItem{constructor(e){this.telemetryReporter=e,this._item=vscode.window.createStatusBarItem({id:"status.typescript.exclude",name:localize("statusExclude","TypeScript: Configure Excludes"),alignment:vscode.StatusBarAlignment.Right,priority:98}),this._item.command="js.projectStatus.command"}getCurrentHint(){return this._currentHint}hide(){this._item.hide()}show(e){this._currentHint={message:e?localize("hintExclude","To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}",e):localize("hintExclude.generic","To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.")},this._item.tooltip=this._currentHint.message,this._item.text=localize("large.label","Configure Excludes"),this._item.tooltip=localize("hintExclude.tooltip","To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on."),this._item.color="#A5DF3B",this._item.show(),this.telemetryReporter.logTelemetry("js.hintProjectExcludes")}}function createLargeProjectMonitorFromTypeScript(e,t){return t.onProjectLanguageServiceStateChanged((o=>{if(o.languageServiceEnabled)e.hide();else{e.show();const i=o.projectName;i&&(e.configFileName=i,vscode.window.showWarningMessage(e.getCurrentHint().message,{title:localize("large.label","Configure Excludes"),index:0}).then((e=>{e&&0===e.index&&onConfigureExcludesSelected(t,i)})))}}))}function onConfigureExcludesSelected(e,t){if((0,tsconfig_1.isImplicitProjectConfigFile)(t)){const o=e.getWorkspaceRootForResource(vscode.Uri.file(t));o&&(0,tsconfig_1.openOrCreateConfig)(/tsconfig\.?.*\.json/.test(t)?0:1,o,e.configuration)}else vscode.workspace.openTextDocument(t).then(vscode.window.showTextDocument)}function create(e){const t=[],o=new ExcludeHintItem(e.telemetryReporter);return t.push(vscode.commands.registerCommand("js.projectStatus.command",(()=>{o.configFileName&&onConfigureExcludesSelected(e,o.configFileName);const{message:t}=o.getCurrentHint();return vscode.window.showInformationMessage(t)}))),t.push(createLargeProjectMonitorFromTypeScript(o,e)),vscode.Disposable.from(...t)}exports.create=create;