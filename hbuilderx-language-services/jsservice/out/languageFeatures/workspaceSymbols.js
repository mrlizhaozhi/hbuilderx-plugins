"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.register=void 0;const vscode=require("vscode"),PConst=require("../protocol.const"),api_1=require("../utils/api"),fileSchemes=require("../utils/fileSchemes"),languageDescription_1=require("../utils/languageDescription"),typeConverters=require("../utils/typeConverters"),modifiers_1=require("../utils/modifiers");function getSymbolKind(e){switch(e.kind){case PConst.Kind.method:return vscode.SymbolKind.Method;case PConst.Kind.enum:return vscode.SymbolKind.Enum;case PConst.Kind.enumMember:return vscode.SymbolKind.EnumMember;case PConst.Kind.function:return vscode.SymbolKind.Function;case PConst.Kind.class:return vscode.SymbolKind.Class;case PConst.Kind.interface:return vscode.SymbolKind.Interface;case PConst.Kind.type:return vscode.SymbolKind.Class;case PConst.Kind.memberVariable:case PConst.Kind.memberGetAccessor:case PConst.Kind.memberSetAccessor:return vscode.SymbolKind.Field;case PConst.Kind.variable:default:return vscode.SymbolKind.Variable}}class TypeScriptWorkspaceSymbolProvider{constructor(e,t){this.client=e,this.modeIds=t}async provideWorkspaceSymbols(e,t){let o;if(this.searchAllOpenProjects)o=void 0;else{const e=this.getDocument();if(o=e?await this.toOpenedFiledPath(e):void 0,!o&&this.client.apiVersion.lt(api_1.default.v390))return[]}const i={file:o,searchValue:e,maxResultCount:256},s=await this.client.execute("navto",i,t);return"response"===s.type&&s.body?s.body.filter((e=>e.containerName||"alias"!==e.kind)).map((e=>this.toSymbolInformation(e))):[]}get searchAllOpenProjects(){return this.client.apiVersion.gte(api_1.default.v390)&&"allOpenProjects"===vscode.workspace.getConfiguration("typescript").get("workspaceSymbols.scope","allOpenProjects")}async toOpenedFiledPath(e){var t;if(e.uri.scheme===fileSchemes.git)try{const o=vscode.Uri.file(null===(t=JSON.parse(e.uri.query))||void 0===t?void 0:t.path);if((0,languageDescription_1.doesResourceLookLikeATypeScriptFile)(o)||(0,languageDescription_1.doesResourceLookLikeAJavaScriptFile)(o)){const e=await vscode.workspace.openTextDocument(o);return this.client.toOpenedFilePath(e)}}catch(e){}return this.client.toOpenedFilePath(e)}toSymbolInformation(e){const t=TypeScriptWorkspaceSymbolProvider.getLabel(e),o=new vscode.SymbolInformation(t,getSymbolKind(e),e.containerName||"",typeConverters.Location.fromTextSpan(this.client.toResource(e.file),e)),i=e.kindModifiers?(0,modifiers_1.parseKindModifier)(e.kindModifiers):void 0;return(null==i?void 0:i.has(PConst.KindModifiers.depreacted))&&(o.tags=[vscode.SymbolTag.Deprecated]),o}static getLabel(e){const t=e.name;return"method"===e.kind||"function"===e.kind?t+"()":t}getDocument(){var e;const t=null===(e=vscode.window.activeTextEditor)||void 0===e?void 0:e.document;if(t&&this.modeIds.includes(t.languageId))return t;const o=vscode.workspace.textDocuments;for(const e of o)if(this.modeIds.includes(e.languageId))return e}}function register(e,t){return vscode.languages.registerWorkspaceSymbolProvider(new TypeScriptWorkspaceSymbolProvider(e,t))}exports.register=register;