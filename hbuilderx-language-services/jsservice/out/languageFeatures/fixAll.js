"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.register=void 0;const vscode=require("vscode"),nls=require("vscode-nls"),typescriptService_1=require("../typescriptService"),api_1=require("../utils/api"),dependentRegistration_1=require("../utils/dependentRegistration"),errorCodes=require("../utils/errorCodes"),fixNames=require("../utils/fixNames"),typeConverters=require("../utils/typeConverters"),localize=nls.loadMessageBundle();async function buildIndividualFixes(e,i,t,o,n,r){var s;for(const d of n)for(const{codes:n,fixName:c}of e){if(r.isCancellationRequested)return;if(!n.has(d.code))continue;const e={...typeConverters.Range.toFileRangeRequestArgs(o,d.range),errorCodes:[+d.code]},a=await t.execute("getCodeFixes",e,r);if("response"!==a.type)continue;const u=null===(s=a.body)||void 0===s?void 0:s.find((e=>e.fixName===c));if(u){typeConverters.WorkspaceEdit.withFileCodeEdits(i,t,u.changes);break}}}async function buildCombinedFix(e,i,t,o,n,r){var s,d;for(const c of n)for(const{codes:n,fixName:a}of e){if(r.isCancellationRequested)return;if(!n.has(c.code))continue;const e={...typeConverters.Range.toFileRangeRequestArgs(o,c.range),errorCodes:[+c.code]},u=await t.execute("getCodeFixes",e,r);if("response"!==u.type||!(null===(s=u.body)||void 0===s?void 0:s.length))continue;const l=null===(d=u.body)||void 0===d?void 0:d.find((e=>e.fixName===a));if(!l)continue;if(!l.fixId)return void typeConverters.WorkspaceEdit.withFileCodeEdits(i,t,l.changes);const p={scope:{type:"file",args:{file:o}},fixId:l.fixId},f=await t.execute("getCombinedCodeFix",p,r);if("response"!==f.type||!f.body)return;return void typeConverters.WorkspaceEdit.withFileCodeEdits(i,t,f.body.changes)}}class SourceAction extends vscode.CodeAction{}class SourceFixAll extends SourceAction{constructor(){super(localize("autoFix.label","Fix All"),SourceFixAll.kind)}async build(e,i,t,o){this.edit=new vscode.WorkspaceEdit,await buildIndividualFixes([{codes:errorCodes.incorrectlyImplementsInterface,fixName:fixNames.classIncorrectlyImplementsInterface},{codes:errorCodes.asyncOnlyAllowedInAsyncFunctions,fixName:fixNames.awaitInSyncFunction}],this.edit,e,i,t,o),await buildCombinedFix([{codes:errorCodes.unreachableCode,fixName:fixNames.unreachableCode}],this.edit,e,i,t,o)}}SourceFixAll.kind=vscode.CodeActionKind.SourceFixAll.append("ts");class SourceRemoveUnused extends SourceAction{constructor(){super(localize("autoFix.unused.label","Remove all unused code"),SourceRemoveUnused.kind)}async build(e,i,t,o){this.edit=new vscode.WorkspaceEdit,await buildCombinedFix([{codes:errorCodes.variableDeclaredButNeverUsed,fixName:fixNames.unusedIdentifier}],this.edit,e,i,t,o)}}SourceRemoveUnused.kind=vscode.CodeActionKind.Source.append("removeUnused").append("ts");class SourceAddMissingImports extends SourceAction{constructor(){super(localize("autoFix.missingImports.label","Add all missing imports"),SourceAddMissingImports.kind)}async build(e,i,t,o){this.edit=new vscode.WorkspaceEdit,await buildCombinedFix([{codes:errorCodes.cannotFindName,fixName:fixNames.fixImport}],this.edit,e,i,t,o)}}SourceAddMissingImports.kind=vscode.CodeActionKind.Source.append("addMissingImports").append("ts");class TypeScriptAutoFixProvider{constructor(e,i,t){this.client=e,this.fileConfigurationManager=i,this.diagnosticsManager=t}get metadata(){return{providedCodeActionKinds:TypeScriptAutoFixProvider.kindProviders.map((e=>e.kind))}}async provideCodeActions(e,i,t,o){if(!t.only||!vscode.CodeActionKind.Source.intersects(t.only))return;const n=this.client.toOpenedFilePath(e);if(!n)return;const r=this.getFixAllActions(t.only);if(this.client.bufferSyncSupport.hasPendingDiagnostics(e.uri))return r;const s=this.diagnosticsManager.getDiagnostics(e.uri);return s.length?(await this.fileConfigurationManager.ensureConfigurationForDocument(e,o),o.isCancellationRequested?void 0:(await Promise.all(r.map((e=>e.build(this.client,n,s,o)))),r)):r}getFixAllActions(e){return TypeScriptAutoFixProvider.kindProviders.filter((i=>e.intersects(i.kind))).map((e=>new e))}}function register(e,i,t,o){return(0,dependentRegistration_1.conditionalRegistration)([(0,dependentRegistration_1.requireMinVersion)(i,api_1.default.v300),(0,dependentRegistration_1.requireSomeCapability)(i,typescriptService_1.ClientCapability.Semantic)],(()=>{const n=new TypeScriptAutoFixProvider(i,t,o);return vscode.languages.registerCodeActionsProvider(e.semantic,n,n.metadata)}))}TypeScriptAutoFixProvider.kindProviders=[SourceFixAll,SourceRemoveUnused,SourceAddMissingImports],exports.register=register;