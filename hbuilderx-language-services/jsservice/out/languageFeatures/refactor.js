"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.register=void 0;const vscode=require("vscode"),nls=require("vscode-nls"),learnMoreAboutRefactorings_1=require("../commands/learnMoreAboutRefactorings"),typescriptService_1=require("../typescriptService"),api_1=require("../utils/api"),cancellation_1=require("../utils/cancellation"),dependentRegistration_1=require("../utils/dependentRegistration"),fileSchemes=require("../utils/fileSchemes"),typeConverters=require("../utils/typeConverters"),localize=nls.loadMessageBundle();class ApplyRefactoringCommand{constructor(e,t){this.client=e,this.telemetryReporter=t,this.id=ApplyRefactoringCommand.ID}async execute(e,t,n,r){const o=this.client.toOpenedFilePath(e);if(!o)return!1;this.telemetryReporter.logTelemetry("refactor.execute",{action:n});const i={...typeConverters.Range.toFileRangeRequestArgs(o,r),refactor:t,action:n},c=await this.client.execute("getEditsForRefactor",i,cancellation_1.nulToken);if("response"!==c.type||!c.body)return!1;if(!c.body.edits.length)return vscode.window.showErrorMessage(localize("refactoringFailed","Could not apply refactoring")),!1;const a=await this.toWorkspaceEdit(c.body);if(!await vscode.workspace.applyEdit(a))return!1;const s=c.body.renameLocation;return s&&await vscode.commands.executeCommand("editor.action.rename",[e.uri,typeConverters.Position.fromLocation(s)]),!0}async toWorkspaceEdit(e){const t=new vscode.WorkspaceEdit;for(const n of e.edits){const e=this.client.toResource(n.fileName);e.scheme===fileSchemes.file&&t.createFile(e,{ignoreIfExists:!0})}return typeConverters.WorkspaceEdit.withFileCodeEdits(t,this.client,e.edits),t}}ApplyRefactoringCommand.ID="_typescript.applyRefactoring";class SelectRefactorCommand{constructor(e,t){this.client=e,this.doRefactoring=t,this.id=SelectRefactorCommand.ID}async execute(e,t,n){if(!this.client.toOpenedFilePath(e))return!1;const r=await vscode.window.showQuickPick(t.actions.map((e=>({label:e.name,description:e.description}))));return!!r&&this.doRefactoring.execute(e,t.name,r.label,n)}}SelectRefactorCommand.ID="_typescript.selectRefactoring";const Extract_Function=Object.freeze({kind:vscode.CodeActionKind.RefactorExtract.append("function"),matches:e=>e.name.startsWith("function_")}),Extract_Constant=Object.freeze({kind:vscode.CodeActionKind.RefactorExtract.append("constant"),matches:e=>e.name.startsWith("constant_")}),Extract_Type=Object.freeze({kind:vscode.CodeActionKind.RefactorExtract.append("type"),matches:e=>e.name.startsWith("Extract to type alias")}),Extract_Interface=Object.freeze({kind:vscode.CodeActionKind.RefactorExtract.append("interface"),matches:e=>e.name.startsWith("Extract to interface")}),Move_NewFile=Object.freeze({kind:vscode.CodeActionKind.Refactor.append("move").append("newFile"),matches:e=>e.name.startsWith("Move to a new file")}),Rewrite_Import=Object.freeze({kind:vscode.CodeActionKind.RefactorRewrite.append("import"),matches:e=>e.name.startsWith("Convert namespace import")||e.name.startsWith("Convert named imports")}),Rewrite_Export=Object.freeze({kind:vscode.CodeActionKind.RefactorRewrite.append("export"),matches:e=>e.name.startsWith("Convert default export")||e.name.startsWith("Convert named export")}),Rewrite_Arrow_Braces=Object.freeze({kind:vscode.CodeActionKind.RefactorRewrite.append("arrow").append("braces"),matches:e=>e.name.startsWith("Convert default export")||e.name.startsWith("Convert named export")}),Rewrite_Parameters_ToDestructured=Object.freeze({kind:vscode.CodeActionKind.RefactorRewrite.append("parameters").append("toDestructured"),matches:e=>e.name.startsWith("Convert parameters to destructured object")}),Rewrite_Property_GenerateAccessors=Object.freeze({kind:vscode.CodeActionKind.RefactorRewrite.append("property").append("generateAccessors"),matches:e=>e.name.startsWith("Generate 'get' and 'set' accessors")}),allKnownCodeActionKinds=[Extract_Function,Extract_Constant,Extract_Type,Extract_Interface,Move_NewFile,Rewrite_Import,Rewrite_Export,Rewrite_Arrow_Braces,Rewrite_Parameters_ToDestructured,Rewrite_Property_GenerateAccessors];class TypeScriptRefactorProvider{constructor(e,t,n,r){this.client=e,this.formattingOptionsManager=t;const o=n.register(new ApplyRefactoringCommand(this.client,r));n.register(new SelectRefactorCommand(this.client,o))}async provideCodeActions(e,t,n,r){if(!this.shouldTrigger(t,n))return;if(!this.client.toOpenedFilePath(e))return;const o=await this.client.interruptGetErr((()=>{const o=this.client.toOpenedFilePath(e);if(!o)return;this.formattingOptionsManager.ensureConfigurationForDocument(e,r);const i={...typeConverters.Range.toFileRangeRequestArgs(o,t),triggerReason:this.toTsTriggerReason(n)};return this.client.execute("getApplicableRefactors",i,r)}));if("response"!==(null==o?void 0:o.type)||!o.body)return;const i=this.convertApplicableRefactors(o.body,e,t);return n.only?this.pruneInvalidActions(this.appendInvalidActions(i),n.only,5):i}toTsTriggerReason(e){if(e.only)return"invoked"}convertApplicableRefactors(e,t,n){const r=[];for(const o of e)if(!1===o.inlineable){const e=new vscode.CodeAction(o.description,vscode.CodeActionKind.Refactor);e.command={title:o.description,command:SelectRefactorCommand.ID,arguments:[t,o,n]},r.push(e)}else for(const e of o.actions)r.push(this.refactorActionToCodeAction(e,t,o,n,o.actions));return r}refactorActionToCodeAction(e,t,n,r,o){const i=new vscode.CodeAction(e.description,TypeScriptRefactorProvider.getKind(e));return e.notApplicableReason?i.disabled={reason:e.notApplicableReason}:i.command={title:e.description,command:ApplyRefactoringCommand.ID,arguments:[t,n.name,e.name,r]},i.isPreferred=TypeScriptRefactorProvider.isPreferred(e,o),i}shouldTrigger(e,t){return!(t.only&&!vscode.CodeActionKind.Refactor.contains(t.only))&&e instanceof vscode.Selection}static getKind(e){const t=allKnownCodeActionKinds.find((t=>t.matches(e)));return t?t.kind:vscode.CodeActionKind.Refactor}static isPreferred(e,t){if(Extract_Constant.matches(e)){const n=e=>{var t;const n=null===(t=e.match(/scope_(\d)/))||void 0===t?void 0:t[1];return n?+n:void 0},r=n(e.name);return"number"==typeof r&&t.filter((t=>t!==e&&Extract_Constant.matches(t))).every((e=>{const t=n(e.name);return"number"!=typeof t||r<t}))}return!(!Extract_Type.matches(e)&&!Extract_Interface.matches(e))}appendInvalidActions(e){if(this.client.apiVersion.gte(api_1.default.v400))return e;if(!e.some((e=>e.kind&&Extract_Constant.kind.contains(e.kind)))){const t=new vscode.CodeAction(localize("extractConstant.disabled.title","Extract to constant"),Extract_Constant.kind);t.disabled={reason:localize("extractConstant.disabled.reason","The current selection cannot be extracted")},t.isPreferred=!0,e.push(t)}if(!e.some((e=>e.kind&&Extract_Function.kind.contains(e.kind)))){const t=new vscode.CodeAction(localize("extractFunction.disabled.title","Extract to function"),Extract_Function.kind);t.disabled={reason:localize("extractFunction.disabled.reason","The current selection cannot be extracted")},e.push(t)}return e}pruneInvalidActions(e,t,n){if(this.client.apiVersion.lt(api_1.default.v400))return e;const r=[],o=[],i=[];for(const t of e)t.disabled?t.kind&&(Extract_Constant.kind.contains(t.kind)||Extract_Function.kind.contains(t.kind))?o.push(t):i.push(t):r.push(t);const c=[];c.push(...o),c.push(...i);const a=c.filter((e=>!t||e.kind&&t.contains(e.kind))).slice(0,n);return r.push(...a),r}}function register(e,t,n,r,o){return(0,dependentRegistration_1.conditionalRegistration)([(0,dependentRegistration_1.requireMinVersion)(t,TypeScriptRefactorProvider.minVersion),(0,dependentRegistration_1.requireSomeCapability)(t,typescriptService_1.ClientCapability.Semantic)],(()=>vscode.languages.registerCodeActionsProvider(e.semantic,new TypeScriptRefactorProvider(t,n,r,o),TypeScriptRefactorProvider.metadata)))}TypeScriptRefactorProvider.minVersion=api_1.default.v240,TypeScriptRefactorProvider.metadata={providedCodeActionKinds:[vscode.CodeActionKind.Refactor,...allKnownCodeActionKinds.map((e=>e.kind))],documentation:[{kind:vscode.CodeActionKind.Refactor,command:{command:learnMoreAboutRefactorings_1.LearnMoreAboutRefactoringsCommand.id,title:localize("refactor.documentation.title","Learn more about JS/TS refactorings")}}]},exports.register=register;