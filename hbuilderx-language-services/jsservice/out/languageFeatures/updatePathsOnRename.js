"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.register=void 0;const path=require("path"),vscode=require("vscode"),nls=require("vscode-nls"),typescriptService_1=require("../typescriptService"),api_1=require("../utils/api"),async_1=require("../utils/async"),cancellation_1=require("../utils/cancellation"),dependentRegistration_1=require("../utils/dependentRegistration"),dispose_1=require("../utils/dispose"),fileSchemes=require("../utils/fileSchemes"),languageDescription_1=require("../utils/languageDescription"),typeConverters=require("../utils/typeConverters"),localize=nls.loadMessageBundle(),updateImportsOnFileMoveName="updateImportsOnFileMove.enabled";async function isDirectory(e){try{return(await vscode.workspace.fs.stat(e)).type===vscode.FileType.Directory}catch(e){return!1}}class UpdateImportsOnFileRenameHandler extends dispose_1.Disposable{constructor(e,t,i){super(),this.client=e,this.fileConfigurationManager=t,this._handles=i,this._delayer=new async_1.Delayer(50),this._pendingRenames=new Set,this._register(vscode.workspace.onDidRenameFiles((async e=>{const[{newUri:t,oldUri:i}]=e.files,s=this.client.toPath(t);if(!s)return;const n=this.client.toPath(i);if(!n)return;if("never"===this.getConfiguration(t).get(updateImportsOnFileMoveName))return;const o=await this.getJsTsFileBeingMoved(t);o&&this.client.toPath(o)&&(this._pendingRenames.add({oldUri:i,newUri:t,newFilePath:s,oldFilePath:n,jsTsFileThatIsBeingMoved:o}),this._delayer.trigger((()=>{vscode.window.withProgress({location:vscode.ProgressLocation.Window,title:localize("renameProgress.title","Checking for update of JS/TS imports")},(()=>this.flushRenames()))})))})))}async flushRenames(){const e=Array.from(this._pendingRenames);this._pendingRenames.clear();for(const t of this.groupRenames(e)){const e=new vscode.WorkspaceEdit,i=[];for(const{oldUri:s,newUri:n,newFilePath:o,oldFilePath:r,jsTsFileThatIsBeingMoved:a}of t){const t=await vscode.workspace.openTextDocument(a);this.client.bufferSyncSupport.closeResource(s),this.client.bufferSyncSupport.openTextDocument(t),await this.withEditsForFileRename(e,t,r,o)&&i.push(n)}e.size&&await this.confirmActionWithUser(i)&&await vscode.workspace.applyEdit(e)}}async confirmActionWithUser(e){if(!e.length)return!1;switch(this.getConfiguration(e[0]).get(updateImportsOnFileMoveName)){case"always":return!0;case"never":return!1;default:return this.promptUser(e)}}getConfiguration(e){return vscode.workspace.getConfiguration((0,languageDescription_1.doesResourceLookLikeATypeScriptFile)(e)?"typescript":"javascript",e)}async promptUser(e){if(!e.length)return!1;const t=await vscode.window.showInformationMessage(1===e.length?localize("prompt","Update imports for '{0}'?",path.basename(e[0].fsPath)):this.getConfirmMessage(localize("promptMoreThanOne","Update imports for the following {0} files?",e.length),e),{modal:!0},{title:localize("reject.title","No"),choice:2,isCloseAffordance:!0},{title:localize("accept.title","Yes"),choice:1},{title:localize("always.title","Always automatically update imports"),choice:3},{title:localize("never.title","Never automatically update imports"),choice:4});if(!t)return!1;switch(t.choice){case 1:return!0;case 2:return!1;case 3:return this.getConfiguration(e[0]).update(updateImportsOnFileMoveName,"always",vscode.ConfigurationTarget.Global),!0;case 4:return this.getConfiguration(e[0]).update(updateImportsOnFileMoveName,"never",vscode.ConfigurationTarget.Global),!1}return!1}async getJsTsFileBeingMoved(e){if(e.scheme===fileSchemes.file){if(await isDirectory(e)){return(await vscode.workspace.findFiles({base:e.fsPath,pattern:"**/*.{ts,tsx,js,jsx}"},"**/node_modules/**",1))[0]}return await this._handles(e)?e:void 0}}async withEditsForFileRename(e,t,i,s){const n=await this.client.interruptGetErr((()=>{this.fileConfigurationManager.setGlobalConfigurationFromDocument(t,cancellation_1.nulToken);const e={oldFilePath:i,newFilePath:s};return this.client.execute("getEditsForFileRename",e,cancellation_1.nulToken)}));return!("response"!==n.type||!n.body.length)&&(typeConverters.WorkspaceEdit.withFileCodeEdits(e,this.client,n.body),!0)}groupRenames(e){const t=new Map;for(const i of e){const e=`${this.client.getWorkspaceRootForResource(i.jsTsFileThatIsBeingMoved)}@@@${(0,languageDescription_1.doesResourceLookLikeATypeScriptFile)(i.jsTsFileThatIsBeingMoved)}`;t.has(e)||t.set(e,new Set),t.get(e).add(i)}return t.values()}getConfirmMessage(e,t){const i=[e];return i.push(""),i.push(...t.slice(0,10).map((e=>path.basename(e.fsPath)))),t.length>10&&(t.length-10==1?i.push(localize("moreFile","...1 additional file not shown")):i.push(localize("moreFiles","...{0} additional files not shown",t.length-10))),i.push(""),i.join("\n")}}function register(e,t,i){return(0,dependentRegistration_1.conditionalRegistration)([(0,dependentRegistration_1.requireMinVersion)(e,UpdateImportsOnFileRenameHandler.minVersion),(0,dependentRegistration_1.requireSomeCapability)(e,typescriptService_1.ClientCapability.Semantic)],(()=>new UpdateImportsOnFileRenameHandler(e,t,i)))}UpdateImportsOnFileRenameHandler.minVersion=api_1.default.v300,exports.register=register;