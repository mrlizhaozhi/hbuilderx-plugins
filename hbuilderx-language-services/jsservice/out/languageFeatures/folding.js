"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.register=void 0;const vscode=require("vscode"),api_1=require("../utils/api"),arrays_1=require("../utils/arrays"),dependentRegistration_1=require("../utils/dependentRegistration"),typeConverters=require("../utils/typeConverters");class TypeScriptFoldingProvider{constructor(e){this.client=e}async provideFoldingRanges(e,n,t){const i=this.client.toOpenedFilePath(e);if(!i)return;const r={file:i},o=await this.client.execute("getOutliningSpans",r,t);return"response"===o.type&&o.body?(0,arrays_1.coalesce)(o.body.map((n=>this.convertOutliningSpan(n,e)))):void 0}convertOutliningSpan(e,n){const t=typeConverters.Range.fromTextSpan(e.textSpan),i=TypeScriptFoldingProvider.getFoldingRangeKind(e);if("comment"===e.kind){if(n.lineAt(t.start.line).text.match(/\/\/\s*#endregion/gi))return}const r=t.start.line,o=t.end.character>0&&["}","]"].includes(n.getText(new vscode.Range(t.end.translate(0,-1),t.end)))?Math.max(t.end.line-1,t.start.line):t.end.line;return new vscode.FoldingRange(r,o,i)}static getFoldingRangeKind(e){switch(e.kind){case"comment":return vscode.FoldingRangeKind.Comment;case"region":return vscode.FoldingRangeKind.Region;case"imports":return vscode.FoldingRangeKind.Imports;default:return}}}function register(e,n){return(0,dependentRegistration_1.conditionalRegistration)([(0,dependentRegistration_1.requireMinVersion)(n,TypeScriptFoldingProvider.minVersion)],(()=>vscode.languages.registerFoldingRangeProvider(e.syntax,new TypeScriptFoldingProvider(n))))}TypeScriptFoldingProvider.minVersion=api_1.default.v280,exports.register=register;