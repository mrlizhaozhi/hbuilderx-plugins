"use strict";function parseScriptSetupRanges(e,n){let i,t,s,a,r,o,p,d,m,g=!1,l=[],u=0,f=-1;const c=parseBindingRanges(e,n,!1),E=parseBindingRanges(e,n,!0);return n.forEachChild((i=>{var t;const s=(e.isTypeAliasDeclaration(i)||e.isInterfaceDeclaration(i))&&(null===(t=i.modifiers)||void 0===t?void 0:t.some((n=>n.kind===e.SyntaxKind.ExportKeyword)));g||e.isImportDeclaration(i)||s||e.isEmptyStatement(i)||e.isImportEqualsDeclaration(i)?s&&g&&l.push(h(i)):(u=i.getStart(n),g=!0)})),n.forEachChild((e=>x(e,n))),{importSectionEndOffset:u,notOnTopTypeExports:l,bindings:c,typeBindings:E,withDefaultsArg:i,propsAssignName:t,propsRuntimeArg:s,propsTypeArg:a,emitsAssignName:r,emitsRuntimeArg:o,emitsTypeArg:p,emitsTypeNums:f,exposeRuntimeArg:d,exposeTypeArg:m};function h(e){return getStartEnd(e,n)}function x(g,l){var u;if(e.isCallExpression(g)&&e.isIdentifier(g.expression)){const c=g.expression.getText(n);if("defineProps"===c||"defineEmits"===c||"defineExpose"===c){if(g.arguments.length){const i=g.arguments[0];"defineProps"===c?(s=h(i),e.isVariableDeclaration(l)&&(t=l.name.getText(n))):"defineEmits"===c?(o=h(i),e.isVariableDeclaration(l)&&(r=l.name.getText(n))):"defineExpose"===c&&(d=h(i))}if(null===(u=g.typeArguments)||void 0===u?void 0:u.length){const i=g.typeArguments[0];"defineProps"===c?(a=h(i),e.isVariableDeclaration(l)&&(t=l.name.getText(n))):"defineEmits"===c?(p=h(i),e.isTypeLiteralNode(i)&&(f=i.members.length),e.isVariableDeclaration(l)&&(r=l.name.getText(n))):"defineExpose"===c&&(m=h(i))}}else if("withDefaults"===c){if(g.arguments.length>=2){const e=g.arguments[1];i=h(e)}e.isVariableDeclaration(l)&&(t=l.name.getText(n))}}g.forEachChild((e=>x(e,g)))}}function parseBindingRanges(e,n,i){const t=[];return n.forEachChild((a=>{if(i)(e.isTypeAliasDeclaration(a)||e.isInterfaceDeclaration(a))&&t.push(s(a.name));else if(e.isVariableStatement(a))for(const i of a.declarationList.declarations){const s=(r=i.name,findBindingVars(e,r,n));for(const e of s)t.push(e)}else e.isFunctionDeclaration(a)?a.name&&e.isIdentifier(a.name)&&t.push(s(a.name)):e.isClassDeclaration(a)?a.name&&t.push(s(a.name)):e.isEnumDeclaration(a)&&t.push(s(a.name));var r;if(e.isImportDeclaration(a)&&a.importClause&&(i||!a.importClause.isTypeOnly)&&(a.importClause.name&&!i&&t.push(s(a.importClause.name)),a.importClause.namedBindings))if(e.isNamedImports(a.importClause.namedBindings))for(const e of a.importClause.namedBindings.elements)t.push(s(e.name));else e.isNamespaceImport(a.importClause.namedBindings)&&t.push(s(a.importClause.namedBindings.name))})),t;function s(e){return getStartEnd(e,n)}}function findBindingVars(e,n,i){const t=[];return function n(s){if(e.isIdentifier(s))t.push(getStartEnd(s,i));else if(e.isObjectBindingPattern(s)||e.isArrayBindingPattern(s))for(const i of s.elements)e.isBindingElement(i)&&n(i.name);else e.isPropertyAssignment(s)?n(s.initializer):e.isShorthandPropertyAssignment(s)?t.push(getStartEnd(s.name,i)):(e.isSpreadAssignment(s)||e.isSpreadElement(s))&&n(s.expression)}(n),t}function getStartEnd(e,n){return{start:e.getStart(n),end:e.getEnd()}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStartEnd=exports.findBindingVars=exports.parseBindingRanges=exports.parseScriptSetupRanges=void 0,exports.parseScriptSetupRanges=parseScriptSetupRanges,exports.parseBindingRanges=parseBindingRanges,exports.findBindingVars=findBindingVars,exports.getStartEnd=getStartEnd;