"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.printAST=exports.getCallExpressionByOffset=exports.getCallExpression=exports.findNodePathByOffset=void 0;const typescript=require("typescript"),enumString="\nexport enum SyntaxKind {\n  Unknown = 0,\n  EndOfFileToken = 1,\n  SingleLineCommentTrivia = 2,\n  MultiLineCommentTrivia = 3,\n  NewLineTrivia = 4,\n  WhitespaceTrivia = 5,\n  ShebangTrivia = 6,\n  ConflictMarkerTrivia = 7,\n  NumericLiteral = 8,\n  BigIntLiteral = 9,\n  StringLiteral = 10,\n  JsxText = 11,\n  JsxTextAllWhiteSpaces = 12,\n  RegularExpressionLiteral = 13,\n  NoSubstitutionTemplateLiteral = 14,\n  TemplateHead = 15,\n  TemplateMiddle = 16,\n  TemplateTail = 17,\n  OpenBraceToken = 18,\n  CloseBraceToken = 19,\n  OpenParenToken = 20,\n  CloseParenToken = 21,\n  OpenBracketToken = 22,\n  CloseBracketToken = 23,\n  DotToken = 24,\n  DotDotDotToken = 25,\n  SemicolonToken = 26,\n  CommaToken = 27,\n  QuestionDotToken = 28,\n  LessThanToken = 29,\n  LessThanSlashToken = 30,\n  GreaterThanToken = 31,\n  LessThanEqualsToken = 32,\n  GreaterThanEqualsToken = 33,\n  EqualsEqualsToken = 34,\n  ExclamationEqualsToken = 35,\n  EqualsEqualsEqualsToken = 36,\n  ExclamationEqualsEqualsToken = 37,\n  EqualsGreaterThanToken = 38,\n  PlusToken = 39,\n  MinusToken = 40,\n  AsteriskToken = 41,\n  AsteriskAsteriskToken = 42,\n  SlashToken = 43,\n  PercentToken = 44,\n  PlusPlusToken = 45,\n  MinusMinusToken = 46,\n  LessThanLessThanToken = 47,\n  GreaterThanGreaterThanToken = 48,\n  GreaterThanGreaterThanGreaterThanToken = 49,\n  AmpersandToken = 50,\n  BarToken = 51,\n  CaretToken = 52,\n  ExclamationToken = 53,\n  TildeToken = 54,\n  AmpersandAmpersandToken = 55,\n  BarBarToken = 56,\n  QuestionToken = 57,\n  ColonToken = 58,\n  AtToken = 59,\n  QuestionQuestionToken = 60,\n  /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */\n  BacktickToken = 61,\n  EqualsToken = 62,\n  PlusEqualsToken = 63,\n  MinusEqualsToken = 64,\n  AsteriskEqualsToken = 65,\n  AsteriskAsteriskEqualsToken = 66,\n  SlashEqualsToken = 67,\n  PercentEqualsToken = 68,\n  LessThanLessThanEqualsToken = 69,\n  GreaterThanGreaterThanEqualsToken = 70,\n  GreaterThanGreaterThanGreaterThanEqualsToken = 71,\n  AmpersandEqualsToken = 72,\n  BarEqualsToken = 73,\n  BarBarEqualsToken = 74,\n  AmpersandAmpersandEqualsToken = 75,\n  QuestionQuestionEqualsToken = 76,\n  CaretEqualsToken = 77,\n  Identifier = 78,\n  PrivateIdentifier = 79,\n  BreakKeyword = 80,\n  CaseKeyword = 81,\n  CatchKeyword = 82,\n  ClassKeyword = 83,\n  ConstKeyword = 84,\n  ContinueKeyword = 85,\n  DebuggerKeyword = 86,\n  DefaultKeyword = 87,\n  DeleteKeyword = 88,\n  DoKeyword = 89,\n  ElseKeyword = 90,\n  EnumKeyword = 91,\n  ExportKeyword = 92,\n  ExtendsKeyword = 93,\n  FalseKeyword = 94,\n  FinallyKeyword = 95,\n  ForKeyword = 96,\n  FunctionKeyword = 97,\n  IfKeyword = 98,\n  ImportKeyword = 99,\n  InKeyword = 100,\n  InstanceOfKeyword = 101,\n  NewKeyword = 102,\n  NullKeyword = 103,\n  ReturnKeyword = 104,\n  SuperKeyword = 105,\n  SwitchKeyword = 106,\n  ThisKeyword = 107,\n  ThrowKeyword = 108,\n  TrueKeyword = 109,\n  TryKeyword = 110,\n  TypeOfKeyword = 111,\n  VarKeyword = 112,\n  VoidKeyword = 113,\n  WhileKeyword = 114,\n  WithKeyword = 115,\n  ImplementsKeyword = 116,\n  InterfaceKeyword = 117,\n  LetKeyword = 118,\n  PackageKeyword = 119,\n  PrivateKeyword = 120,\n  ProtectedKeyword = 121,\n  PublicKeyword = 122,\n  StaticKeyword = 123,\n  YieldKeyword = 124,\n  AbstractKeyword = 125,\n  AsKeyword = 126,\n  AssertsKeyword = 127,\n  AnyKeyword = 128,\n  AsyncKeyword = 129,\n  AwaitKeyword = 130,\n  BooleanKeyword = 131,\n  ConstructorKeyword = 132,\n  DeclareKeyword = 133,\n  GetKeyword = 134,\n  InferKeyword = 135,\n  IsKeyword = 136,\n  KeyOfKeyword = 137,\n  ModuleKeyword = 138,\n  NamespaceKeyword = 139,\n  NeverKeyword = 140,\n  ReadonlyKeyword = 141,\n  RequireKeyword = 142,\n  NumberKeyword = 143,\n  ObjectKeyword = 144,\n  SetKeyword = 145,\n  StringKeyword = 146,\n  SymbolKeyword = 147,\n  TypeKeyword = 148,\n  UndefinedKeyword = 149,\n  UniqueKeyword = 150,\n  UnknownKeyword = 151,\n  FromKeyword = 152,\n  GlobalKeyword = 153,\n  BigIntKeyword = 154,\n  OfKeyword = 155,\n  QualifiedName = 156,\n  ComputedPropertyName = 157,\n  TypeParameter = 158,\n  Parameter = 159,\n  Decorator = 160,\n  PropertySignature = 161,\n  PropertyDeclaration = 162,\n  MethodSignature = 163,\n  MethodDeclaration = 164,\n  Constructor = 165,\n  GetAccessor = 166,\n  SetAccessor = 167,\n  CallSignature = 168,\n  ConstructSignature = 169,\n  IndexSignature = 170,\n  TypePredicate = 171,\n  TypeReference = 172,\n  FunctionType = 173,\n  ConstructorType = 174,\n  TypeQuery = 175,\n  TypeLiteral = 176,\n  ArrayType = 177,\n  TupleType = 178,\n  OptionalType = 179,\n  RestType = 180,\n  UnionType = 181,\n  IntersectionType = 182,\n  ConditionalType = 183,\n  InferType = 184,\n  ParenthesizedType = 185,\n  ThisType = 186,\n  TypeOperator = 187,\n  IndexedAccessType = 188,\n  MappedType = 189,\n  LiteralType = 190,\n  NamedTupleMember = 191,\n  ImportType = 192,\n  ObjectBindingPattern = 193,\n  ArrayBindingPattern = 194,\n  BindingElement = 195,\n  ArrayLiteralExpression = 196,\n  ObjectLiteralExpression = 197,\n  PropertyAccessExpression = 198,\n  ElementAccessExpression = 199,\n  CallExpression = 200,\n  NewExpression = 201,\n  TaggedTemplateExpression = 202,\n  TypeAssertionExpression = 203,\n  ParenthesizedExpression = 204,\n  FunctionExpression = 205,\n  ArrowFunction = 206,\n  DeleteExpression = 207,\n  TypeOfExpression = 208,\n  VoidExpression = 209,\n  AwaitExpression = 210,\n  PrefixUnaryExpression = 211,\n  PostfixUnaryExpression = 212,\n  BinaryExpression = 213,\n  ConditionalExpression = 214,\n  TemplateExpression = 215,\n  YieldExpression = 216,\n  SpreadElement = 217,\n  ClassExpression = 218,\n  OmittedExpression = 219,\n  ExpressionWithTypeArguments = 220,\n  AsExpression = 221,\n  NonNullExpression = 222,\n  MetaProperty = 223,\n  SyntheticExpression = 224,\n  TemplateSpan = 225,\n  SemicolonClassElement = 226,\n  Block = 227,\n  EmptyStatement = 228,\n  VariableStatement = 229,\n  ExpressionStatement = 230,\n  IfStatement = 231,\n  DoStatement = 232,\n  WhileStatement = 233,\n  ForStatement = 234,\n  ForInStatement = 235,\n  ForOfStatement = 236,\n  ContinueStatement = 237,\n  BreakStatement = 238,\n  ReturnStatement = 239,\n  WithStatement = 240,\n  SwitchStatement = 241,\n  LabeledStatement = 242,\n  ThrowStatement = 243,\n  TryStatement = 244,\n  DebuggerStatement = 245,\n  VariableDeclaration = 246,\n  VariableDeclarationList = 247,\n  FunctionDeclaration = 248,\n  ClassDeclaration = 249,\n  InterfaceDeclaration = 250,\n  TypeAliasDeclaration = 251,\n  EnumDeclaration = 252,\n  ModuleDeclaration = 253,\n  ModuleBlock = 254,\n  CaseBlock = 255,\n  NamespaceExportDeclaration = 256,\n  ImportEqualsDeclaration = 257,\n  ImportDeclaration = 258,\n  ImportClause = 259,\n  NamespaceImport = 260,\n  NamedImports = 261,\n  ImportSpecifier = 262,\n  ExportAssignment = 263,\n  ExportDeclaration = 264,\n  NamedExports = 265,\n  NamespaceExport = 266,\n  ExportSpecifier = 267,\n  MissingDeclaration = 268,\n  ExternalModuleReference = 269,\n  JsxElement = 270,\n  JsxSelfClosingElement = 271,\n  JsxOpeningElement = 272,\n  JsxClosingElement = 273,\n  JsxFragment = 274,\n  JsxOpeningFragment = 275,\n  JsxClosingFragment = 276,\n  JsxAttribute = 277,\n  JsxAttributes = 278,\n  JsxSpreadAttribute = 279,\n  JsxExpression = 280,\n  CaseClause = 281,\n  DefaultClause = 282,\n  HeritageClause = 283,\n  CatchClause = 284,\n  PropertyAssignment = 285,\n  ShorthandPropertyAssignment = 286,\n  SpreadAssignment = 287,\n  EnumMember = 288,\n  UnparsedPrologue = 289,\n  UnparsedPrepend = 290,\n  UnparsedText = 291,\n  UnparsedInternalText = 292,\n  UnparsedSyntheticReference = 293,\n  SourceFile = 294,\n  Bundle = 295,\n  UnparsedSource = 296,\n  InputFiles = 297,\n  JSDocTypeExpression = 298,\n  JSDocAllType = 299,\n  JSDocUnknownType = 300,\n  JSDocNullableType = 301,\n  JSDocNonNullableType = 302,\n  JSDocOptionalType = 303,\n  JSDocFunctionType = 304,\n  JSDocVariadicType = 305,\n  JSDocNamepathType = 306,\n  JSDocComment = 307,\n  JSDocTypeLiteral = 308,\n  JSDocSignature = 309,\n  JSDocTag = 310,\n  JSDocAugmentsTag = 311,\n  JSDocImplementsTag = 312,\n  JSDocAuthorTag = 313,\n  JSDocDeprecatedTag = 314,\n  JSDocClassTag = 315,\n  JSDocPublicTag = 316,\n  JSDocPrivateTag = 317,\n  JSDocProtectedTag = 318,\n  JSDocReadonlyTag = 319,\n  JSDocCallbackTag = 320,\n  JSDocEnumTag = 321,\n  JSDocParameterTag = 322,\n  JSDocReturnTag = 323,\n  JSDocThisTag = 324,\n  JSDocTypeTag = 325,\n  JSDocTemplateTag = 326,\n  JSDocTypedefTag = 327,\n  JSDocPropertyTag = 328,\n  SyntaxList = 329,\n  NotEmittedStatement = 330,\n  PartiallyEmittedExpression = 331,\n  CommaListExpression = 332,\n  MergeDeclarationMarker = 333,\n  EndOfDeclarationMarker = 334,\n  SyntheticReferenceExpression = 335,\n  Count = 336,\n  FirstAssignment = 62,\n  LastAssignment = 77,\n  FirstCompoundAssignment = 63,\n  LastCompoundAssignment = 77,\n  FirstReservedWord = 80,\n  LastReservedWord = 115,\n  FirstKeyword = 80,\n  LastKeyword = 155,\n  FirstFutureReservedWord = 116,\n  LastFutureReservedWord = 124,\n  FirstTypeNode = 171,\n  LastTypeNode = 192,\n  FirstPunctuation = 18,\n  LastPunctuation = 77,\n  FirstToken = 0,\n  LastToken = 155,\n  FirstTriviaToken = 2,\n  LastTriviaToken = 7,\n  FirstLiteralToken = 8,\n  LastLiteralToken = 14,\n  FirstTemplateToken = 14,\n  LastTemplateToken = 17,\n  FirstBinaryOperator = 29,\n  LastBinaryOperator = 77,\n  FirstStatement = 229,\n  LastStatement = 245,\n  FirstNode = 156,\n  FirstJSDocNode = 298,\n  LastJSDocNode = 328,\n  FirstJSDocTagNode = 310,\n  LastJSDocTagNode = 328,\n}";function formatSyntaxKind(n,e=0){let t=typescript.createSourceFile("",n,typescript.ScriptTarget.Latest),r=new Map,o=[];for(o.push(t);o.length>0;){let n=o.shift();for(let a=0;a<n.getChildCount();++a){let s=n.getChildAt(a);if(s.kind===typescript.SyntaxKind.EnumDeclaration){for(let n=0;n<s.members.length;++n){let o=s.members[n];o.kind===typescript.SyntaxKind.EnumMember&&r.set(e++,o.name.getText(t))}break}o.push(s)}}return r}function collect(n,e,t){n.getFullStart()<=t&&t<=n.getEnd()&&(e.push(n),typescript.forEachChild(n,(n=>collect(n,e,t))))}function findNodePathByOffset(n,e){let t=[];t.push(n);let r=n;return n.getEnd()<e||n.getFullStart()>e||typescript.forEachChild(r,(n=>collect(n,t,e))),t}function getCallExpression(n,e){return getCallExpressionByOffset(n.getEnd(),e)}function getCallExpressionByOffset(n,e){let t=null,r=findNodePathByOffset(e,n);for(let n=r.length-1;n>=0;--n){let e=r[n];if(e.kind===typescript.SyntaxKind.CallExpression){t=e;break}}return t}function printAST(n,e=0,t){console.log(new Array(e+1).join("----"),formatSyntaxKind(enumString).get(n.kind),n.pos,n.end),e++,n.getChildren(t).forEach((n=>printAST(n,e,t)))}exports.findNodePathByOffset=findNodePathByOffset,exports.getCallExpression=getCallExpression,exports.getCallExpressionByOffset=getCallExpressionByOffset,exports.printAST=printAST;