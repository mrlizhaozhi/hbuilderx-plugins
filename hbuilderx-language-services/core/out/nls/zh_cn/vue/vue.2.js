"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.content=void 0;const content={"vue.2.options.ComponentOptions.data":"\nVue 实例的数据对象。\n    \n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#data\n    \n<pre>\nvar data = { a: 1 }\n\n// 直接创建一个实例\nvar vm = new Vue({\n  data: data\n})\nvm.a // => 1\nvm.$data === data // => true\n\n// Vue.extend() 中 data 必须是函数\nvar Component = Vue.extend({\n  data: function () {\n    return { a: 1 }\n  }\n})\n</pre>\n","vue.2.options.ComponentOptions.props":"\nprops 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义校验和设置默认值。\n    \n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#props\n    \n<pre>\n// 简单语法\nVue.component('props-demo-simple', {\n  props: ['size', 'myMessage']\n})\n\n// 对象语法，提供校验\nVue.component('props-demo-advanced', {\n  props: {\n    // 检测类型\n    height: Number,\n    // 检测类型 + 其他验证\n    age: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: function (value) {\n        return value >= 0\n      }\n    }\n  }\n})\n</pre>\n","vue.2.options.ComponentOptions.propsData":"\n创建实例时传递 props。主要作用是方便测试。\n    \n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#propsData\n    \n<pre>\nvar Comp = Vue.extend({\n  props: ['msg'],\n  template: '<div>{{ msg }}</div>'\n})\n\nvar vm = new Comp({\n  propsData: {\n    msg: 'hello'\n  }\n})\n</pre>\n","vue.2.options.ComponentOptions.computed":"\n计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#computed\n\n<pre>\nvar vm = new Vue({\n  data: { a: 1 },\n  computed: {\n    // 仅读取\n    aDouble: function () {\n      return this.a * 2\n    },\n    // 读取和设置\n    aPlus: {\n      get: function () {\n        return this.a + 1\n      },\n      set: function (v) {\n        this.a = v - 1\n      }\n    }\n  }\n})\nvm.aPlus   // => 2\nvm.aPlus = 3\nvm.a       // => 2\nvm.aDouble // => 4\n</pre>\n","vue.2.options.ComponentOptions.methods":"\nmethods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#methods\n\n<pre>\nvar vm = new Vue({\n  data: { a: 1 },\n  methods: {\n    plus: function () {\n      this.a++\n    }\n  }\n})\nvm.plus()\nvm.a // 2\n</pre>\n\n注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () => this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。\n","vue.2.options.ComponentOptions.watch":"\n一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#watch\n\n<pre>\nvar vm = new Vue({\n  data: {\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4,\n    e: {\n      f: {\n        g: 5\n      }\n    }\n  },\n  watch: {\n    a: function (val, oldVal) {\n      console.log('new: %s, old: %s', val, oldVal)\n    },\n    // 方法名\n    b: 'someMethod',\n    // 深度 watcher\n    c: {\n      handler: function (val, oldVal) { /* ... */ },\n      deep: true\n    },\n    // 该回调将会在侦听开始之后被立即调用\n    d: {\n      handler: function (val, oldVal) { /* ... */ },\n      immediate: true\n    },\n    e: [\n      function handle1 (val, oldVal) { /* ... */ },\n      function handle2 (val, oldVal) { /* ... */ }\n    ],\n    // watch vm.e.f's value: {g: 5}\n    'e.f': function (val, oldVal) { /* ... */ }\n  }\n})\nvm.a = 2 // => new: 2, old: 1\n</pre>    \n","vue.2.options.ComponentOptions.el":"\n提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#el\n","vue.2.options.ComponentOptions.template":"\n一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#template\n\n如果 Vue 选项中包含渲染函数，该模板将被忽略。\n","vue.2.options.ComponentOptions.render":"\n字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#render\n\nVue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。\n","vue.2.options.ComponentOptions.renderError":"\n<b>2.2.0 新增。只在开发者环境下工作。</b>当 render 函数遭遇错误时，提供另外一种渲染输出。其错误将会作为第二个参数传递到 renderError。这个功能配合 hot-reload 非常实用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#renderError\n\n<pre>\nnew Vue({\n  render (h) {\n    throw new Error('oops')\n  },\n  renderError (h, err) {\n    return h('pre', { style: { color: 'red' }}, err.stack)\n  }\n}).$mount('#app')\n</pre>    \n","vue.2.options.ComponentOptions.beforeCreate":"\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#beforeCreate\n","vue.2.options.ComponentOptions.created":"\n在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#created\n","vue.2.options.ComponentOptions.beforeDestroy":"\n实例销毁之前调用。在这一步，实例仍然完全可用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#beforeDestroy\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.destroyed":"\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#destroyed\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.beforeMount":"\n在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#beforeMount\n","vue.2.options.ComponentOptions.mounted":"\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#mounted\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.beforeUpdate":"\n数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#beforeUpdate\n\n该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。\n","vue.2.options.ComponentOptions.updated":"\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#updated\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.activated":"\nkeep-alive 组件激活时调用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#activated\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.deactivated":"\nkeep-alive 组件停用时调用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#deactivated\n\n该钩子在服务器端渲染期间不被调用。\n","vue.2.options.ComponentOptions.errorCaptured":"\n<b>2.5.0+ 新增</b>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#errorCaptured\n","vue.2.options.ComponentOptions.directives":"\n包含 Vue 实例可用指令的哈希表。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#directives\n","vue.2.options.ComponentOptions.components":"\n包含 Vue 实例可用组件的哈希表。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#components\n","vue.2.options.ComponentOptions.filters":"\n包含 Vue 实例可用过滤器的哈希表。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#filters\n","vue.2.options.ComponentOptions.provide":"\n需要和inject一起使用\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#provide-inject\n\nprovide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n","vue.2.options.ComponentOptions.inject":"\n需要和inject一起使用\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#provide-inject\n\nprovide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n","vue.2.options.ComponentOptions.model":'\n允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#model\n\n<pre>\nVue.component(\'my-checkbox\', {\n  model: {\n    prop: \'checked\',\n    event: \'change\'\n  },\n  props: {\n    // this allows using the `value` prop for a different purpose\n    value: String,\n    // use `checked` as the prop which take the place of `value`\n    checked: {\n      type: Number,\n      default: 0\n    }\n  },\n  // ...\n})\n</pre>\n<pre>\n<my-checkbox v-model="foo" value="some value"></my-checkbox>\n</pre>\n<pre>\n上述代码相当于：\n<my-checkbox\n  :checked="foo"\n  @change="val => { foo = val }"\n  value="some value">\n</my-checkbox>\n</pre>    \n',"vue.2.options.ComponentOptions.parent":"\n指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#parent\n\n节制地使用 $parent 和 $children - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信\n","vue.2.options.ComponentOptions.mixins":"\nmixins 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。\nMixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#mixins\n\n<pre>\nvar mixin = {\n  created: function () { console.log(1) }\n}\nvar vm = new Vue({\n  created: function () { console.log(2) },\n  mixins: [mixin]\n})\n// => 1\n// => 2\n</pre>\n","vue.2.options.ComponentOptions.name":"\n允许组件模板递归地调用自身。注意，组件在全局用 Vue.component() 注册时，全局 ID 自动作为组件的 name。\n指定 name 选项的另一个好处是便于调试。有名字的组件有更友好的警告信息。另外，当在有 vue-devtools，未命名组件将显示成 <AnonymousComponent>，这很没有语义。通过提供 name 选项，可以获得更有语义信息的组件树。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#name\n","vue.2.options.ComponentOptions.extends":"\n允许声明扩展另一个组件(可以是一个简单的选项对象或构造函数)，而无需使用 Vue.extend。这主要是为了便于扩展单文件组件。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#extends\n\n<pre>\nvar CompA = { ... }\n\n// 在没有调用 `Vue.extend` 时候继承 CompA\nvar CompB = {\n  extends: CompA,\n  ...\n}\n</pre>\n","vue.2.options.ComponentOptions.delimiters":"\n改变纯文本插入分隔符。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#delimiters\n\n<pre>\nnew Vue({\n  delimiters: ['${', '}']\n})\n\n// 分隔符变成了 ES6 模板字符串的风格\n</pre>\n","vue.2.FunctionalComponentOptions.functional":"\n使组件无状态 (没有 data ) 和无实例 (没有 this 上下文)。他们用一个简单的 render 函数返回虚拟节点使他们更容易渲染。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#functional\n","vue.2.options.ComponentOptions.comments":"\n当设为 true 时，将会保留且渲染模板中的 HTML 注释。默认行为是舍弃它们。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#comments\n","vue.2.options.ComponentOptions.inheritAttrs":"\n默认情况下父作用域的不被认作 props 的特性绑定 (attribute bindings) 将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。当撰写包裹一个目标元素或另一个组件的组件时，这可能不会总是符合预期行为。通过设置 inheritAttrs 到 false，这些默认行为将会被去掉。而通过 (同样是 2.4 新增的) 实例属性 $attrs 可以让这些特性生效，且可以通过 v-bind 显性的绑定到非根元素上。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#inheritAttrs\n","vue.2.VueConfiguration.slient":"\n默认值是false\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#silent\n\n//取消 Vue 所有的日志与警告。\nVue.config.silent = true\n","vue.2.VueConfiguration.optionMergeStrategies":"\n自定义合并策略的选项。合并策略选项分别接收在父实例和子实例上定义的该选项的值作为第一个和第二个参数，Vue 实例上下文被作为第三个参数传入。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#optionMergeStrategies\n\n<pre>\nVue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n  return child + 1\n}\n\nconst Profile = Vue.extend({\n  _my_option: 1\n})\n\n// Profile.options._my_option = 2\n</pre>\n","vue.2.VueConfiguration.devtools":"\n配置是否允许 vue-devtools 检查代码。开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#devtools\n\n<pre>\n// 务必在加载 Vue 之后，立即同步设置以下内容\nVue.config.devtools = true\n</pre> \n","vue.2.VueConfiguration.productionTip":"\n<b>2.2.0 新增。</b>设置为 false 以阻止 vue 在启动时生成生产提示。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#productionTip\n","vue.2.VueConfiguration.performance":"\n<b>2.2.0 新增。</b>设置为 true 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持 performance.mark API 的浏览器上。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#performance\n","vue.2.VueConfiguration.errorHandler":"\n指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#errorHandler\n\n<pre>\nVue.config.errorHandler = function (err, vm, info) {\n  // handle error\n  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子\n  // 只在 2.2.0+ 可用\n}\n</pre>\n","ue.2.VueConfiguration.warnHandler":"\n<b>2.4.0 新增</b>。为 Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，在生产环境下它会被忽略。\n\n<pre>\nVue.config.warnHandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n}\n</pre>\n","vue.2.VueConfiguration.ignoredElements":"\n须使 Vue 忽略在 Vue 之外的自定义元素 (e.g. 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#ignoredElements\n\n<pre>\nVue.config.ignoredElements = [\n  'my-custom-web-component',\n  'another-web-component',\n  // 用一个 `RegExp` 忽略所有“ion-”开头的元素\n  // 仅在 2.5+ 支持\n  /^ion-/\n]\n</pre>\n","vue.2.VueConfiguration.keyCodes":'\n给 v-on 自定义键位别名。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/?#keyCodes\n\n<pre>\nVue.config.keyCodes = {\n  v: 86,\n  f1: 112,\n  // camelCase 不可用\n  mediaPlayPause: 179,\n  // 取而代之的是 kebab-case 且用双引号括起来\n  "media-play-pause": 179,\n  up: [38, 87]\n}\n</pre>\n<pre>\n&lt;input type="text" @keyup.media-play-pause="method"&gt;\n</pre>    \n',"vue.2.Vue.mount":"\n如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-mount\n\n<pre>\nvar MyComponent = Vue.extend({\n  template: '<div>Hello!</div>'\n})\n\n// 创建并挂载到 #app (会替换 #app)\nnew MyComponent().$mount('#app')\n\n// 同上\nnew MyComponent({ el: '#app' })\n\n// 或者，在文档之外渲染并且随后挂载\nvar component = new MyComponent().$mount()\ndocument.getElementById('app').appendChild(component.$el)\n</pre>    \n","vue.2.Vue.forceUpdate":"\n迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-forceUpdate\n","vue.2.Vue.destroy":"\n完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-destroy\n\n在大多数场景中你不应该调用这个方法。最好使用 v-if 和 v-for 指令以数据驱动的方式控制子组件的生命周期。\n","vue.2.Vue.set":"\n这是全局 Vue.set 的别名。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-set\n","vue.2.Vue.delete":"\n这是全局 Vue.delete 的别名。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-delete\n","vue.2.Vue.watch":"\n观察 Vue 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-watch\n\n<pre>\n// 键路径\nvm.$watch('a.b.c', function (newVal, oldVal) {\n  // 做点什么\n})\n\n// 函数\nvm.$watch(\n  function () {\n    return this.a + this.b\n  },\n  function (newVal, oldVal) {\n    // 做点什么\n  }\n)\n</pre>\n","vue.2.Vue.on":"\n监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-on\n\n<pre>\nvm.$on('test', function (msg) {\n  console.log(msg)\n})\nvm.$emit('test', 'hi')\n// => \"hi\"\n</pre>\n","vue.2.Vue.once":"\n监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-once\n","vue.2.Vue.off":"\n移除自定义事件监听器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-off\n","vue.2.Vue.emit":"\n触发当前实例上的事件。附加参数都会传给监听器回调。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-emit\n\n<pre>\nVue.component('welcome-button', {\n  template: `\n    <button v-on:click=\"$emit('welcome')\">\n      Click me to be welcomed\n    </button>\n  `\n})\n</pre>\n<pre>\n&lt;div id=\"emit-example-simple\"&gt;\n  &lt;welcome-button v-on:welcome=\"sayHi\"&gt;&lt;/welcome-button&gt;\n&lt;/div&gt;\n</pre>\n<pre>\nnew Vue({\n  el: '#emit-example-simple',\n  methods: {\n    sayHi: function () {\n      alert('Hi!')\n    }\n  }\n})\n</pre>    \n","vue.2.Vue.nextTick":"\n将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-nextTick\n\n<pre>\nnew Vue({\n  // ...\n  methods: {\n    // ...\n    example: function () {\n      // 修改数据\n      this.message = 'changed'\n      // DOM 还没有更新\n      this.$nextTick(function () {\n        // DOM 现在更新了\n        // `this` 绑定到当前实例\n        this.doSomethingElse()\n      })\n    }\n  }\n})\n</pre>\n","vue.2.VueConstructor.extend":"\n使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\ndata 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-extend\n\n<pre>\n&lt;div id=\"mount-point\"&gt;&lt;/div&gt;\n</pre>\n<pre>\n// 创建构造器\nvar Profile = Vue.extend({\n  template: '&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;',\n  data: function () {\n    return {\n      firstName: 'Walter',\n      lastName: 'White',\n      alias: 'Heisenberg'\n    }\n  }\n})\n// 创建 Profile 实例，并挂载到一个元素上。\nnew Profile().$mount('#mount-point')\n</pre>\n<pre>\n结果如下：\n\n&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt;\n</pre>\n","vue.2.VueConstructor.nextTick":"\n在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-nextTick\n    \n<pre>\n// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n})\n\n// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)\nVue.nextTick()\n  .then(function () {\n    // DOM 更新了\n})\n</pre>\n","vue.2.VueConstructor.set":"\n向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 this.myObject.newProperty = 'hi')\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-set\n\n注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。\n","vue.2.VueConstructor.delete":"\n删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-delete\n\n注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。\n","vue.2.VueConstructor.directive":"\n注册或获取全局指令。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-directive\n","vue.2.VueConstructor.filter":"\n注册或获取全局过滤器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-filter\n\n<pre>\n// 注册\nVue.filter('my-filter', function (value) {\n  // 返回处理后的值\n})\n\n// getter，返回已注册的过滤器\nvar myFilter = Vue.filter('my-filter')\n</pre>\n","vue.2.VueConstructor.component":"\n注册或获取全局组件。注册还会自动使用给定的id设置组件的名称。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-component\n\n<pre>\n// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n</pre>\n","vue.2.VueConstructor.use":"\n安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。\n当 install 方法被同一个插件多次调用，插件将只会被安装一次。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-use\n","vue.2.VueConstructor.mixin":"\n全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-mixin\n","vue.2.VueConstructor.compile":"\n在 render 函数中编译模板字符串。只在独立构建时有效\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-compile\n\n<pre>\nvar res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\nnew Vue({\n  data: {\n    msg: 'hello'\n  },\n  render: res.render,\n  staticRenderFns: res.staticRenderFns\n})\n</pre>\n","vue.2.VueConstructor.config":"\nVue.config 是一个对象，包含 Vue 的全局配置。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#全局配置\n","vue.2.VueConstructor.version":"\n提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#Vue-version\n","vue.2.Vue.el":"","vue.2.Vue.options":"\n用于当前 Vue 实例的初始化选项。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-options\n\n<pre>\nnew Vue({\n  customOption: 'foo',\n  created: function () {\n    console.log(this.$options.customOption) // => 'foo'\n  }\n})\n</pre>\n","vue.2.Vue.parent":"\n父实例，如果当前实例有的话。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-parent   \n","vue.2.Vue.root":"\n当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-root\n","vue.2.Vue.children":"\n当前实例的直接子组件。需要注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-children\n","vue.2.Vue.refs":"\n一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-refs\n","vue.2.Vue.slots":"\n用来访问被插槽分发的内容。每个具名插槽 有其相应的属性 (例如：slot=\"foo\" 中的内容将会在 vm.$slots.foo 中被找到)。default 属性包括了所有没有被包含在具名插槽中的节点。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-slots\n\n<pre>\n&lt;blog-post&gt;\n  &lt;h1 slot=\"header\"&gt;\n    About Me\n  &lt;/h1&gt;\n\n  &lt;p&gt;Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.&lt;/p&gt;\n\n  &lt;p slot=\"footer\"&gt;\n    Copyright 2016 Evan You\n  &lt;/p&gt;\n\n  &lt;p&gt;If I have some content down here, it will also be included in vm.$slots.default.&lt;/p&gt;.\n&lt;/blog-post&gt;\n</pre>\n<pre>\nVue.component('blog-post', {\n  render: function (createElement) {\n    var header = this.$slots.header\n    var body   = this.$slots.default\n    var footer = this.$slots.footer\n    return createElement('div', [\n      createElement('header', header),\n      createElement('main', body),\n      createElement('footer', footer)\n    ])\n  }\n})\n</pre>    \n","vue.2.Vue.scopedSlots":"\n用来访问作用域插槽。对于包括 默认 slot 在内的每一个插槽，该对象都包含一个返回相应 VNode 的函数。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-scopedSlots\n","vue.2.Vue.isServer":"\n当前 Vue 实例是否运行于服务器。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-isServer\n","vue.2.Vue.data":"\nVue 实例观察的数据对象。Vue 实例代理了对其 data 对象属性的访问。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-data\n","vue.2.Vue.props":"\n当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象属性的访问。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-props\n","vue.2.Vue.attrs":'\n包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind="$attrs" 传入内部组件——在创建高级别的组件时非常有用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-attrs\n',"vue.2.Vue.listeners":'\n包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="$listeners" 传入内部组件——在创建更高层次的组件时非常有用。\n\n参考:<br/>\nhttps://cn.vuejs.org/v2/api/#vm-listeners\n'};exports.content=content;